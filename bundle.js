(()=>{"use strict";var t={791:(t,e,n)=>{n.d(e,{A:()=>a});var i=n(942),s=n.n(i),r=n(278),o=n.n(r)()(s());o.push([t.id,':root {\n  --grid-size: 30;\n}\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nhtml {\n  background-color: black;\n  color: white;\n}\n\n.game-container,\n.container {\n  width: 100%;\n  max-height: 100vh;\n  margin: 0 auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 20px;\n}\n\n.controls {\n  width: 100%;\n  display: flex;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n}\n@media screen and (max-width: 768px) {\n  .controls {\n    flex-direction: column;\n  }\n}\n\n.speed-value {\n  width: 60px;\n}\n\n.button-wrapper {\n  display: flex;\n  gap: 5px;\n}\n\n.button-wrapper .btn {\n  padding: 5px 10px;\n  border-radius: 5px;\n}\n\n.field {\n  flex-grow: 0;\n  border-collapse: collapse;\n  width: calc(100vw - 200px);\n  height: calc(100vh - 200px);\n}\n\n.field-container {\n  display: flex;\n  justify-content: center;\n  flex-grow: 0;\n  border-collapse: collapse;\n  width: 100%;\n  height: calc(100vh - 200px);\n  overflow: auto;\n}\n\n.canvas {\n  flex-grow: 0;\n  border-collapse: collapse;\n  width: 100%;\n}\n\n.cell {\n  border: 1px solid rgb(255 255 255 / 0.2);\n  width: calc(100% / var(--grid-size));\n  height: calc(100% / var(--grid-size));\n  transition: 0.2s;\n}\n\n.cell[data-state="1"] {\n  background-color: green;\n  transition: 0.2s;\n}\n\n.cell[data-state="3"] {\n  background-color: rgb(0 207 164 / 50%);\n  transition: 0.2s;\n}\n',"",{version:3,sources:["webpack://./style.css"],names:[],mappings:"AAAA;EACE,eAAe;AACjB;AACA;EACE,sBAAsB;EACtB,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,uBAAuB;EACvB,YAAY;AACd;;AAEA;;EAEE,WAAW;EACX,iBAAiB;EACjB,cAAc;EACd,aAAa;EACb,aAAa;EACb,sBAAsB;EACtB,2BAA2B;EAC3B,mBAAmB;EACnB,SAAS;AACX;;AAEA;EACE,WAAW;EACX,aAAa;EACb,SAAS;EACT,uBAAuB;EACvB,mBAAmB;AACrB;AACA;EACE;IACE,sBAAsB;EACxB;AACF;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,aAAa;EACb,QAAQ;AACV;;AAEA;EACE,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,YAAY;EACZ,yBAAyB;EACzB,0BAA0B;EAC1B,2BAA2B;AAC7B;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,YAAY;EACZ,yBAAyB;EACzB,WAAW;EACX,2BAA2B;EAC3B,cAAc;AAChB;;AAEA;EACE,YAAY;EACZ,yBAAyB;EACzB,WAAW;AACb;;AAEA;EACE,wCAAwC;EACxC,oCAAoC;EACpC,qCAAqC;EACrC,gBAAgB;AAClB;;AAEA;EACE,uBAAuB;EACvB,gBAAgB;AAClB;;AAEA;EACE,sCAAsC;EACtC,gBAAgB;AAClB",sourcesContent:[':root {\n  --grid-size: 30;\n}\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nhtml {\n  background-color: black;\n  color: white;\n}\n\n.game-container,\n.container {\n  width: 100%;\n  max-height: 100vh;\n  margin: 0 auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 20px;\n}\n\n.controls {\n  width: 100%;\n  display: flex;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n}\n@media screen and (max-width: 768px) {\n  .controls {\n    flex-direction: column;\n  }\n}\n\n.speed-value {\n  width: 60px;\n}\n\n.button-wrapper {\n  display: flex;\n  gap: 5px;\n}\n\n.button-wrapper .btn {\n  padding: 5px 10px;\n  border-radius: 5px;\n}\n\n.field {\n  flex-grow: 0;\n  border-collapse: collapse;\n  width: calc(100vw - 200px);\n  height: calc(100vh - 200px);\n}\n\n.field-container {\n  display: flex;\n  justify-content: center;\n  flex-grow: 0;\n  border-collapse: collapse;\n  width: 100%;\n  height: calc(100vh - 200px);\n  overflow: auto;\n}\n\n.canvas {\n  flex-grow: 0;\n  border-collapse: collapse;\n  width: 100%;\n}\n\n.cell {\n  border: 1px solid rgb(255 255 255 / 0.2);\n  width: calc(100% / var(--grid-size));\n  height: calc(100% / var(--grid-size));\n  transition: 0.2s;\n}\n\n.cell[data-state="1"] {\n  background-color: green;\n  transition: 0.2s;\n}\n\n.cell[data-state="3"] {\n  background-color: rgb(0 207 164 / 50%);\n  transition: 0.2s;\n}\n'],sourceRoot:""}]);const a=o},278:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",i=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),i&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),i&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,i,s,r){"string"==typeof t&&(t=[[null,t,void 0]]);var o={};if(i)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(o[l]=!0)}for(var c=0;c<t.length;c++){var h=[].concat(t[c]);i&&o[h[0]]||(void 0!==r&&(void 0===h[5]||(h[1]="@layer".concat(h[5].length>0?" ".concat(h[5]):""," {").concat(h[1],"}")),h[5]=r),n&&(h[2]?(h[1]="@media ".concat(h[2]," {").concat(h[1],"}"),h[2]=n):h[2]=n),s&&(h[4]?(h[1]="@supports (".concat(h[4],") {").concat(h[1],"}"),h[4]=s):h[4]="".concat(s)),e.push(h))}},e}},942:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),r="/*# ".concat(s," */");return[e].concat([r]).join("\n")}return[e].join("\n")}},292:t=>{var e=[];function n(t){for(var n=-1,i=0;i<e.length;i++)if(e[i].identifier===t){n=i;break}return n}function i(t,i){for(var r={},o=[],a=0;a<t.length;a++){var l=t[a],c=i.base?l[0]+i.base:l[0],h=r[c]||0,u="".concat(c," ").concat(h);r[c]=h+1;var d=n(u),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==d)e[d].references++,e[d].updater(p);else{var f=s(p,i);i.byIndex=a,e.splice(a,0,{identifier:u,updater:f,references:1})}o.push(u)}return o}function s(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,s){var r=i(t=t||[],s=s||{});return function(t){t=t||[];for(var o=0;o<r.length;o++){var a=n(r[o]);e[a].references--}for(var l=i(t,s),c=0;c<r.length;c++){var h=n(r[c]);0===e[h].references&&(e[h].updater(),e.splice(h,1))}r=l}}},383:t=>{var e={};t.exports=function(t,n){var i=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},88:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},884:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},893:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var s=void 0!==n.layer;s&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,s&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var r=n.sourceMap;r&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleTagTransform(i,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},997:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(i){var s=e[i];if(void 0!==s)return s.exports;var r=e[i]={id:i,exports:{}};return t[i](r,r.exports,n),r.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0;const i={backgroundColor:"black",gridColor:"#B5B8B1",cellColor:"#44944A"};function s(t){const e=t.trim(),n=document.createElement("template");return n.innerHTML=e,n.content.children}function r({field:t,cellRow:e,cellCol:n}){let i=0;const s=t.length;return[-1,0,1].forEach((r=>{[-1,0,1].forEach((o=>{const[a,l]=function(t,e,n,i){let s=n,r=i;return s<0&&(s=t-1),s>t-1&&(s=0),r<0&&(r=e-1),r>e-1&&(r=0),[s,r]}(s,s,e+r,n+o),c=3===t[a][l];i+=c?1:t[a][l]}))})),i-=t[e][n],i}function o(t){return Array.from({length:t},(()=>Array.from({length:t},(()=>0))))}function a(t,e,n){return(e=function(t){var e=function(t){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var n=e.call(t,"string");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==typeof e?e:e+""}(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}class l{constructor(t=0){a(this,"store",[[]]),a(this,"subscribers",{changeAll:[],changeDiff:[]}),a(this,"lastDiff",[]),this.size=t,this.size=t,this.setCells(o(t))}initRandom(){const t=o(this.size);for(let e=0;e<this.size;e++)for(let n=0;n<this.size;n++)t[e][n]=Math.random()>.5?1:0;this.setCells(t)}clear(){this.store=o(this.size),this.emit("changeAll",this.store)}getSize(){return this.size}resize(t){const e=o(t);for(let n=0;n<t;n++)for(let i=0;i<t;i++)void 0!==this.store[n]&&i<this.store[n].length&&(e[n][i]=this.store[n][i]);this.setCells(e)}getCells(){return this.store}getCell(t,e){return this.store[t][e]}setCells(t){const e=t.length===this.store.length?function(t,e){const n=[];for(let i=0;i<e.length;i++)for(let s=0;s<e[i].length;s++)t[i][s]!==e[i][s]&&n.push({row:i,col:s,state:e[i][s]});return n}(this.store,t):null;this.store=t,this.size=t.length,null===e?this.emit("changeAll",t):this.emit("changeDiff",e)}setCellState(t,e,n){this.store[t][e]=n,this.emit("changeDiff",[{row:t,col:e,state:n}])}on(t,e){void 0===this.subscribers[t]&&(this.subscribers[t]=[]),this.subscribers[t].push(e)}off(t,e){this.subscribers[t]=this.subscribers[t].filter((t=>t!==e))}emit(t,e){this.subscribers[t].forEach((t=>{t(e)}))}}const c=(t,e)=>{let n=null;return i=>{null!==n&&clearTimeout(n),n=setTimeout((()=>{t.bind(void 0,i)()}),e)}};function h(t,e,n){return(e=function(t){var e=function(t){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var n=e.call(t,"string");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==typeof e?e:e+""}(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}class u{constructor(t,e,n,s=i){h(this,"cellSize",1),h(this,"mouseMoving",!1),h(this,"ctrlPressed",!1),this.container=t,this.size=e,this.onClick=n,this.style=s,this.canvas=this.createCanvasElement(t);const r=this.canvas.getContext("2d");if(null===r)throw new Error("Cannot create canvas context");this.ctx=r,this.initCanvas(),this.drawBackground(),this.initEvents()}createCanvasElement(t){const e=document.createElement("canvas");return e.className="canvas",t.append(e),e}initEvents(){const t=this.canvas;t.addEventListener("click",this.clickHandler.bind(this)),t.addEventListener("touchmove",this.onTouchMove.bind(this),{passive:!1}),t.addEventListener("mousedown",this.onDown.bind(this)),t.addEventListener("mouseup",this.onUp.bind(this)),t.addEventListener("mousemove",this.onMove.bind(this)),window.addEventListener("keydown",this.onKeyDown.bind(this)),window.addEventListener("keyup",this.onKeyUp.bind(this)),window.addEventListener("resize",this.initCanvas.bind(this))}initCanvas(){this.canvas.style.width="",this.canvas.style.height="";const t=this.canvas.getBoundingClientRect(),e=Math.min(t.width,t.height);this.cellSize=Math.floor(e/this.size),this.cellSize<1&&(this.cellSize=1),this.canvas.width=this.cellSize*this.size,this.canvas.height=this.cellSize*this.size,this.canvas.style.width=this.cellSize*this.size+"px",this.canvas.style.height=this.cellSize*this.size+"px"}drawBackground(t){var e;const n=this.canvas.getContext("2d");null==n||n.clearRect(0,0,this.canvas.width,this.canvas.height),null!==(e=!(null==t))&&void 0!==e||this.drawGrid()}drawGrid(){this.ctx.beginPath();const t=this.canvas.getContext("2d");if(null!==t){for(let e=0;e<this.size;e++){const n=e*this.cellSize,i=this.canvas.width;d(t,0,n,i,n,this.style.gridColor),d(t,n,0,n,i,this.style.gridColor)}this.ctx.closePath()}}resizeHandler(t){this.size=t,requestAnimationFrame((()=>{this.initCanvas(),this.drawBackground()}))}fillCell(t,e,n=this.style.cellColor,i){null!=i||this.ctx.beginPath(),this.ctx.fillStyle=n;const s=this.cellSize;this.ctx.fillRect(e*s,t*s,s,s),null!=i||this.ctx.closePath()}renderAll(t){if(null!==t){this.ctx.beginPath();for(let e=0;e<t.length;e++)for(let n=0;n<t[e].length;n++){const i=0!==t[e][n]?this.style.cellColor:this.style.backgroundColor;this.fillCell(e,n,i)}this.ctx.closePath()}}renderCell(t,e){const{row:n,col:i,state:s}=t,r=0!==s?this.style.cellColor:this.style.backgroundColor;null!=e||this.ctx.beginPath(),this.fillCell(n,i,r,!0),null!=e||this.ctx.closePath()}renderDiff(t){this.ctx.beginPath();for(let e=0;e<t.length;e+=1)this.renderCell(t[e]);this.ctx.closePath()}onDown(t){t.preventDefault()}onUp(t){t.preventDefault(),setTimeout((()=>this.mouseMoving=!1),10)}onMove(t){if(t.preventDefault(),1===t.buttons){this.mouseMoving=!0;const e=this.cellSize,n=Math.floor(t.offsetY/e),i=Math.floor(t.offsetX/e);n>=0&&i>=0&&n<this.size&&i<this.size&&this.onClick(n,i,Number(!this.ctrlPressed))}}onKeyDown(t){"Control"===t.key&&(this.ctrlPressed=!0)}onKeyUp(t){"Control"===t.key&&(this.ctrlPressed=!1)}onTouchMove(t){if(t.touches.length>1)return;t.preventDefault();const e=this.cellSize,n=t.target.getBoundingClientRect(),i=Math.floor((t.targetTouches[0].pageY-n.top)/e),s=Math.floor((t.targetTouches[0].pageX-n.left)/e);i<0||s<0||i>=this.size||s>=this.size||this.onClick(i,s,1)}clickHandler(t){if(this.mouseMoving)return;const e=this.cellSize,n=Math.floor(t.offsetY/e),i=Math.floor(t.offsetX/e);this.onClick(n,i)}}function d(t,e,n,i,s,r){t.beginPath(),t.strokeStyle=null!=r?r:"#fff",t.moveTo(e,n),t.lineTo(i,s),t.stroke(),t.closePath()}function p(t,e){const n=document.createElement("td");return n.className="cell",n.dataset.x=t.toString(),n.dataset.y=e.toString(),n.dataset.state="0",n}function f(t,e,n){return(e=function(t){var e=function(t){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var n=e.call(t,"string");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==typeof e?e:e+""}(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}class A{constructor(t,e,n,s=i){f(this,"mouseMoving",!1),f(this,"ctrlPressed",!1),f(this,"table",null),this.container=t,this.size=e,this.onClick=n,this.style=s,this.initTable(),this.initEvents()}initTable(){var t;null===(t=this.table)||void 0===t||t.remove(),this.table=function(t){const e=document.createElement("table");e.className="field";for(let n=0;n<t;n+=1){const i=document.createElement("tr");i.className="row";for(let e=0;e<t;e+=1){const t=p(n,e);i.appendChild(t)}e.appendChild(i)}return e}(this.size),this.container.appendChild(this.table)}initEvents(){const t=this.table;null!==t&&(t.addEventListener("click",this.clickHandler.bind(this)),t.addEventListener("touchmove",this.onTouchMove.bind(this),{passive:!1}),t.addEventListener("mousedown",this.onDown.bind(this)),t.addEventListener("mouseup",this.onUp.bind(this)),t.addEventListener("mousemove",this.onMove.bind(this)),window.addEventListener("keydown",this.onKeyDown.bind(this)),window.addEventListener("keyup",this.onKeyUp.bind(this)))}resizeHandler(t){this.size=t,requestAnimationFrame((()=>{this.initTable()}))}renderAll(t){requestAnimationFrame((()=>{null!==this.table&&function(t,e,n){const i=t.querySelector(".field");if(null===n||null===i)return 0;let s=0;const r=Array.from(i.querySelectorAll(".row")).reduce(((t,i,r)=>{if(r<e){const o=Array.from(i.children).reduce(((t,i,o)=>(o<e?(i.setAttribute("data-state",n[r][o].toString()),s+=n[r][o],t.push(i)):i.remove(),t)),[]);if(o.length<e)for(let t=o.length;t<e;t+=1){const e=p(r,t);i.append(e),o.push(e)}t.push(o)}else i.remove();return t}),[]);if(r.length<e)for(let t=r.length;t<e;t+=1){const n=document.createElement("tr");n.className="row",r[t]=[];for(let i=0;i<e;i+=1){const e=p(t,i);n.append(e),r[t].push(e)}i.append(n)}}(this.table,this.size,t)}))}renderCell(t,e){requestAnimationFrame((()=>{if(null===this.table)return;const e=this.table.querySelector(`.cell[data-x="${t.row}"][data-y="${t.col}"]`);null!==e&&(e.dataset.state=String(t.state))}))}renderDiff(t){requestAnimationFrame((()=>{for(let e=0;e<t.length;e+=1)this.renderCell(t[e],!0)}))}onDown(t){t.preventDefault()}onUp(t){t.preventDefault(),setTimeout((()=>this.mouseMoving=!1),10)}onMove(t){var e;const n=null===(e=t.target.classList)||void 0===e?void 0:e.contains("cell");if(1===t.buttons&&n){const e=t.target,n=Number(e.dataset.x),i=Number(e.dataset.y);this.onClick(n,i,Number(!this.ctrlPressed))}}onKeyDown(t){"Control"===t.key&&(this.ctrlPressed=!0)}onKeyUp(t){"Control"===t.key&&(this.ctrlPressed=!1)}onTouchMove(t){var e;if(t.touches.length>1)return;t.preventDefault();const n=document.elementFromPoint(t.touches[0].clientX,t.touches[0].clientY);if(null===(e=n.classList)||void 0===e?void 0:e.contains("cell")){n.dataset.state="1";const t=Number(n.dataset.x),e=Number(n.dataset.y);this.onClick(t,e,1)}}clickHandler(t){if(t.target.classList.contains("cell")){const e=t.target,n=Number(e.dataset.x),i=Number(e.dataset.y),s=1===Number(e.dataset.state)?0:1;this.onClick(n,i,s)}}}function v(t,e,n){return(e=function(t){var e=function(t){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var n=e.call(t,"string");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==typeof e?e:e+""}(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var m=n(292),g=n.n(m),b=n(893),C=n.n(b),y=n(383),E=n.n(y),w=n(884),x=n.n(w),B=n(88),z=n.n(B),S=n(997),k=n.n(S),P=n(791),M={};M.styleTagTransform=k(),M.setAttributes=x(),M.insert=E().bind(null,"head"),M.domAPI=C(),M.insertStyleElement=z(),g()(P.A,M),P.A&&P.A.locals&&P.A.locals;const T=document.createElement("div");T.className="game-container",document.body.append(T);const I=new class{constructor(t,e=30,n){v(this,"stepCounter",0),v(this,"timeInterval",200),v(this,"timerId",null),this.container=t,this.size=e,this.viewtype=n,this.store=new l(this.size);const{fieldContainer:i,sizeInput:r,speedInput:o,playButton:a,randomButton:c,clearButton:h,message:d}=function({container:t,size:e,timeInterval:n}){document.documentElement.style.cssText=`--grid-size: ${e}`;const i=s('<div class="controls"></div>')[0],r=s(`\n    <input class="size-input" type="number" min="3" max="1200" value="${e.toString()}"/>\n  `)[0],o=s(`\n    <input class="speed-input" type="range" min="16" max="1000"\n    step="4" value="${n.toString()}"/>\n  `)[0],a=s(`<span class="speed-value">${n} ms</span>`)[0],l=s('<div class="button-wrapper"></div>')[0],[c,h,u]=['<button class="btn btn-game">Start</button>','<button class="btn btn-random">Random</button>','<button class="btn btn-clear">Clear</button>'].map((t=>s(t)[0])),d=document.createElement("div");d.className="message",d.textContent="Step: 0";const p=s('<div class="field-container"></div>')[0];return r.addEventListener("input",(t=>{const e=t.target,n=Number(e.value);n>1200&&(e.value=String(1200)),n<3&&(e.value=String(3))})),o.addEventListener("input",(t=>{const e=t.target;a.textContent=e.value+" ms"})),t.append(i),i.append(r),i.append(o),i.append(a),i.append(l),l.append(c),l.append(h),l.append(u),i.append(d),t.append(p),{fieldContainer:p,sizeInput:r,speedInput:o,playButton:c,randomButton:h,clearButton:u,message:d}}({container:t,size:e,timeInterval:this.timeInterval});this.controls={fieldContainer:i,sizeInput:r,speedInput:o,playButton:a,randomButton:c,clearButton:h,message:d},this.view="table"===n?new A(i,this.size,this.onClick.bind(this)):new u(i,this.size,this.onClick.bind(this)),this.store.on("changeAll",this.view.renderAll.bind(this.view)),this.store.on("changeDiff",this.view.renderDiff.bind(this.view)),this.initControlsHandlers(),this.store.initRandom()}init(){}initControlsHandlers(){const t=this.controls,e={onSizeChange:c((t=>{var e,n;const i=t.target;this.size=Number(i.value),null===(e=this.view)||void 0===e||e.resizeHandler(this.size),null===(n=this.view)||void 0===n||n.renderAll(this.store.getCells()),this.store.resize(this.size)}),300),onSpeedChange:t=>{const e=t.target;this.timeInterval=Number(e.value),null!==this.timerId&&this.restart()}};t.sizeInput.addEventListener("input",e.onSizeChange),t.speedInput.addEventListener("input",e.onSpeedChange),t.playButton.addEventListener("click",(t=>{null===this.timerId?this.start():this.stop()})),t.randomButton.addEventListener("click",(()=>{this.reinitCounter(),this.store.initRandom()})),t.clearButton.addEventListener("click",(()=>{this.store.clear(),this.reinitCounter()}))}reinitCounter(){this.stepCounter=0,this.controls.message.textContent=`Step: ${this.stepCounter}`}onClick(t,e,n){if(null!==this.timerId)return;const i=null!=n?n:1===this.store.getCell(t,e)?0:1;this.store.setCellState(t,e,i)}restart(){this.stop(),this.start()}start(){null===this.timerId&&(this.controls.playButton.innerHTML="Stop",this.controls.clearButton.disabled=!0,this.controls.randomButton.disabled=!0,this.timerId=setInterval(this.runner.bind(this),this.timeInterval))}runner(){requestAnimationFrame((()=>{this.stepCounter+=1,this.controls.message.textContent=`Step: ${this.stepCounter}`;const t=function(t){const e=Array.from({length:t.length},(()=>Array.from({length:t.length},(()=>0))));for(let n=0;n<t.length;n++)for(let i=0;i<t.length;i++){const s=t[n][i],o=r({field:t,cellRow:n,cellCol:i});0===s&&3===o?e[n][i]=1:1===s&&o>=2&&o<=3?e[n][i]=t[n][i]:1===s&&(o<2||o>3)&&(t[n][i]=3,e[n][i]=0)}return e}(this.store.getCells());this.store.setCells(t)}))}stop(){null!==this.timerId&&(this.controls.clearButton.disabled=!1,this.controls.randomButton.disabled=!1,this.controls.playButton.innerHTML="Start",clearInterval(this.timerId),this.timerId=null)}}(T,100,"canvas");I.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,