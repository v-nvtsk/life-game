(()=>{"use strict";var t={790:(t,e,n)=>{n.d(e,{Z:()=>a});var r=n(559),o=n.n(r),i=n(476),s=n.n(i)()(o());s.push([t.id,':root {\n  --grid-size: 30;\n}\n\nhtml {\n  background-color: black;\n  color: white;\n}\n\n.game-container,\n.container {\n  /* max-width: 1024px; */\n  width: 100%;\n  height: 100vh;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 16px;\n}\n\n.controls {\n  width: 100%;\n  display: flex;\n  gap: 10px;\n  justify-content: center;\n}\n\n.field {\n  flex-grow: 0;\n  border-collapse: collapse;\n  width: calc(100vh - 200px);\n  height: calc(100vh - 200px);\n}\n\n.cell {\n  border: 1px solid rgb(255 255 255 / 0.2);\n  width: calc(100% / var(--grid-size));\n  height: calc(100% / var(--grid-size));\n  transition: 0.2s;\n}\n\n.cell[data-state="1"] {\n  background-color: green;\n  transition: 0.2s;\n}\n\n.cell[data-state="3"] {\n  background-color: rgb(0 207 164 / 50%);\n  transition: 0.2s;\n}\n',"",{version:3,sources:["webpack://./style.css"],names:[],mappings:"AAAA;EACE,eAAe;AACjB;;AAEA;EACE,uBAAuB;EACvB,YAAY;AACd;;AAEA;;EAEE,uBAAuB;EACvB,WAAW;EACX,aAAa;EACb,cAAc;EACd,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,SAAS;AACX;;AAEA;EACE,WAAW;EACX,aAAa;EACb,SAAS;EACT,uBAAuB;AACzB;;AAEA;EACE,YAAY;EACZ,yBAAyB;EACzB,0BAA0B;EAC1B,2BAA2B;AAC7B;;AAEA;EACE,wCAAwC;EACxC,oCAAoC;EACpC,qCAAqC;EACrC,gBAAgB;AAClB;;AAEA;EACE,uBAAuB;EACvB,gBAAgB;AAClB;;AAEA;EACE,sCAAsC;EACtC,gBAAgB;AAClB",sourcesContent:[':root {\n  --grid-size: 30;\n}\n\nhtml {\n  background-color: black;\n  color: white;\n}\n\n.game-container,\n.container {\n  /* max-width: 1024px; */\n  width: 100%;\n  height: 100vh;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 16px;\n}\n\n.controls {\n  width: 100%;\n  display: flex;\n  gap: 10px;\n  justify-content: center;\n}\n\n.field {\n  flex-grow: 0;\n  border-collapse: collapse;\n  width: calc(100vh - 200px);\n  height: calc(100vh - 200px);\n}\n\n.cell {\n  border: 1px solid rgb(255 255 255 / 0.2);\n  width: calc(100% / var(--grid-size));\n  height: calc(100% / var(--grid-size));\n  transition: 0.2s;\n}\n\n.cell[data-state="1"] {\n  background-color: green;\n  transition: 0.2s;\n}\n\n.cell[data-state="3"] {\n  background-color: rgb(0 207 164 / 50%);\n  transition: 0.2s;\n}\n'],sourceRoot:""}]);const a=s},476:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,o,i){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(r)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(s[c]=!0)}for(var l=0;l<t.length;l++){var u=[].concat(t[l]);r&&s[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),e.push(u))}},e}},559:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},892:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var i={},s=[],a=0;a<t.length;a++){var c=t[a],l=r.base?c[0]+r.base:c[0],u=i[l]||0,d="".concat(l," ").concat(u);i[l]=u+1;var p=n(d),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(h);else{var f=o(h,r);r.byIndex=a,e.splice(a,0,{identifier:d,updater:f,references:1})}s.push(d)}return s}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var i=r(t=t||[],o=o||{});return function(t){t=t||[];for(var s=0;s<i.length;s++){var a=n(i[s]);e[a].references--}for(var c=r(t,o),l=0;l<i.length;l++){var u=n(i[l]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}i=c}}},311:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},60:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},192:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},760:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},865:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return t[r](i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0,(()=>{function t(t){const e=t.trim(),n=document.createElement("template");return n.innerHTML=e,n.content.children}function e(t,e){const n=document.createElement("td");return n.className="cell",n.dataset.x=t.toString(),n.dataset.y=e.toString(),n.dataset.state="0",n}function r({field:t,cellRow:e,cellCol:n}){let r=0;const o=t.length;return[-1,0,1].forEach((i=>{[-1,0,1].forEach((s=>{const a=e+i,c=n+s;if(a>=0&&c>=0&&a<=o-1&&c<=o-1){const o=3===t[e+i][n+s];r+=o?1:t[e+i][n+s]}}))})),r-=t[e][n],r}function o(t,n,r){const o=t.querySelector(".field");if(null===r||null===o)return 0;let i=0;const s=Array.from(t.querySelectorAll(".row")).reduce(((t,o,s)=>{if(s<n){const a=Array.from(o.children).reduce(((t,e,o)=>(o<n?(e.setAttribute("data-state",r[s][o].toString()),i+=r[s][o],t.push(e)):e.remove(),t)),[]);if(a.length<n)for(let t=a.length;t<n;t+=1){const n=e(s,t);o.append(n),a.push(n)}t.push(a)}else o.remove();return t}),[]);if(s.length<n)for(let t=s.length;t<n;t+=1){const r=document.createElement("tr");r.className="row",s[t]=[];for(let o=0;o<n;o+=1){const n=e(t,o);r.append(n),s[t].push(n)}o.append(r)}return i}function i(t){return Array.from({length:t},(()=>Array.from({length:t},(()=>0))))}function s(t,e,n){var r;return(e="symbol"==typeof(r=function(t,e){if("object"!=typeof t||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(e))?r:String(r))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}class a{constructor(t){s(this,"store",[[]]),s(this,"size",0),this.size=t,this.setCells(i(t))}getSize(){return this.size}resize(t){const e=i(t);for(let n=0;n<t;n++)for(let r=0;r<t;r++)void 0!==this.store[n]&&r<this.store[n].length&&(e[n][r]=this.store[n][r]);this.setCells(e)}getCells(){return this.store}getCell(t,e){return this.store[t][e]}setCells(t){this.store=t,this.size=t.length}setCellState(t,e,n){this.store[t][e]=n}}var c=n(892),l=n.n(c),u=n(760),d=n.n(u),p=n(311),h=n.n(p),f=n(192),A=n.n(f),m=n(60),v=n.n(m),g=n(865),C=n.n(g),b=n(790),y={};y.styleTagTransform=C(),y.setAttributes=A(),y.insert=h().bind(null,"head"),y.domAPI=d(),y.insertStyleElement=v(),l()(b.Z,y),b.Z&&b.Z.locals&&b.Z.locals;const E=document.createElement("div");E.className="game-container",document.body.append(E);const x=new class{constructor(t,e=30,n=400){var r,o,i,s;r=this,i=null,(o="symbol"==typeof(s=function(t,e){if("object"!=typeof t||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(o="timerId"))?s:String(s))in r?Object.defineProperty(r,o,{value:i,enumerable:!0,configurable:!0,writable:!0}):r[o]=i,this.container=t,this.size=e,this.timeInterval=n,this.store=new a(this.size)}init(){const{field:n,sizeInput:r,speedInput:i,button:s}=function({container:n,size:r,timeInterval:o}){const i=t('<div class="controls"></div>')[0],s=t(`\n    <input class="size-input" type="number" min="3" max="100" value="${r.toString()}"/>\n  `)[0],a=t(`\n    <input class="speed-input" type="range" min="10" max="1000"\n    step="10" value="${o.toString()}"/>\n  `)[0],c=t(`<span class="speed-value">${o} ms</span>`)[0],l=t('<button class="btn-game">Start</button>')[0],u=function(t){const n=document.createElement("table");n.className="field";for(let r=0;r<t;r+=1){const o=document.createElement("tr");o.className="row";for(let n=0;n<t;n+=1){const t=e(r,n);o.appendChild(t)}n.appendChild(o)}return n}(r);return s.addEventListener("input",(t=>{const e=t.target,n=Number(e.value);n>100&&(e.value="100"),n<3&&(e.value="3")})),a.addEventListener("input",(t=>{const e=t.target;c.textContent=e.value+" ms"})),n.append(i),i.append(s),i.append(a),i.append(c),n.append(l),n.append(u),{field:u,sizeInput:s,speedInput:a,button:l}}({container:this.container,size:this.size,timeInterval:this.timeInterval}),a={onSizeChange:t=>{const e=t.target;this.size=Number(e.value),document.documentElement.style.cssText=`--grid-size: ${this.size}`,this.store.resize(this.size),o(this.container,this.size,this.store.getCells())},onSpeedChange:t=>{const e=t.target;this.timeInterval=Number(e.value),null!==this.timerId&&this.restart(c.onStop)}};r.addEventListener("input",a.onSizeChange),i.addEventListener("input",a.onSpeedChange),s.addEventListener("click",(t=>{null===this.timerId?c.onStart():c.onStop()}));const c={onStart:()=>{s.innerHTML="Stop",this.start(c.onStop)},onStop:()=>{s.innerHTML="Start",this.stop()}},l={onDown:t=>{t.preventDefault()},onMove:t=>{var e;const n=null===(e=t.target.classList)||void 0===e?void 0:e.contains("cell");if(1===t.buttons&&n){const e=t.target;e.dataset.state="1";const n=Number(e.dataset.x),r=Number(e.dataset.y);this.store.setCellState(n,r,1)}},onClick:t=>{const e=t.target.classList.contains("cell");if(null!==t.target&&e){const e=t.target,n=e.dataset.state;e.dataset.state="1"===n?"0":"1";const r=Number(e.dataset.x),o=Number(e.dataset.y);this.store.setCellState(r,o,Number(e.dataset.state))}}};n.addEventListener("click",l.onClick),n.addEventListener("mousedown",l.onDown),n.addEventListener("mousemove",l.onMove)}restart(t){this.stop(),this.start(t)}start(t){null===this.timerId&&(this.timerId=setInterval((()=>{const e=this.store.getCells(),n=function(t){const e=Array.from({length:t.length},(()=>Array.from({length:t.length},(()=>0))));for(let n=0;n<t.length;n++)for(let o=0;o<t.length;o++){const i=t[n][o],s=r({field:t,cellRow:n,cellCol:o});0===i&&3===s?e[n][o]=1:1===i&&s>=2&&s<=3?e[n][o]=t[n][o]:1===i&&(s<2||s>3)&&(t[n][o]=3,e[n][o]=0)}return e}(e);0===o(this.container,this.size,e)&&t(),this.store.setCells(n)}),this.timeInterval))}stop(){null!==this.timerId&&(clearInterval(this.timerId),this.timerId=null)}getCell(t,e){return this.store.getCell(t,e)}getCells(){return this.store.getCells()}}(E);x.init()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,