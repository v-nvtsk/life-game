(()=>{"use strict";var t={790:(t,e,n)=>{n.d(e,{Z:()=>i});var r=n(559),o=n.n(r),s=n(476),a=n.n(s)()(o());a.push([t.id,"html {\n  background-color: black;\n  color: white;\n}\n\n.game-container,\n.container {\n  /* max-width: 1024px; */\n  width: 100%;\n  height: 100vh;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 16px;\n}\n\n.controls {\n  width: 100%;\n  display: flex;\n  gap: 10px;\n  justify-content: center;\n}\n\n.field {\n  flex-grow: 0;\n  border-collapse: collapse;\n  width: calc(100vh - 200px);\n  height: calc(100vh - 200px);\n}\n\n.cell {\n  border: 1px solid rgb(255 255 255 / 0.2);\n  width: calc(100% / 30);\n  height: calc(100% / 30);\n  transition: 0.2s;\n}\n\n.cell[data-state='1'] {\n  background-color: green;\n  transition: 0.2s;\n}\n\n.cell[data-state='3'] {\n  background-color: rgb(0 207 164 / 50%);\n  transition: 0.2s;\n}\n","",{version:3,sources:["webpack://./style.css"],names:[],mappings:"AAAA;EACE,uBAAuB;EACvB,YAAY;AACd;;AAEA;;EAEE,uBAAuB;EACvB,WAAW;EACX,aAAa;EACb,cAAc;EACd,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,SAAS;AACX;;AAEA;EACE,WAAW;EACX,aAAa;EACb,SAAS;EACT,uBAAuB;AACzB;;AAEA;EACE,YAAY;EACZ,yBAAyB;EACzB,0BAA0B;EAC1B,2BAA2B;AAC7B;;AAEA;EACE,wCAAwC;EACxC,sBAAsB;EACtB,uBAAuB;EACvB,gBAAgB;AAClB;;AAEA;EACE,uBAAuB;EACvB,gBAAgB;AAClB;;AAEA;EACE,sCAAsC;EACtC,gBAAgB;AAClB",sourcesContent:["html {\n  background-color: black;\n  color: white;\n}\n\n.game-container,\n.container {\n  /* max-width: 1024px; */\n  width: 100%;\n  height: 100vh;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 16px;\n}\n\n.controls {\n  width: 100%;\n  display: flex;\n  gap: 10px;\n  justify-content: center;\n}\n\n.field {\n  flex-grow: 0;\n  border-collapse: collapse;\n  width: calc(100vh - 200px);\n  height: calc(100vh - 200px);\n}\n\n.cell {\n  border: 1px solid rgb(255 255 255 / 0.2);\n  width: calc(100% / 30);\n  height: calc(100% / 30);\n  transition: 0.2s;\n}\n\n.cell[data-state='1'] {\n  background-color: green;\n  transition: 0.2s;\n}\n\n.cell[data-state='3'] {\n  background-color: rgb(0 207 164 / 50%);\n  transition: 0.2s;\n}\n"],sourceRoot:""}]);const i=a},476:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,o,s){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(r)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(a[c]=!0)}for(var l=0;l<t.length;l++){var u=[].concat(t[l]);r&&a[u[0]]||(void 0!==s&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=s),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),e.push(u))}},e}},559:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),s="/*# ".concat(o," */");return[e].concat([s]).join("\n")}return[e].join("\n")}},892:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var s={},a=[],i=0;i<t.length;i++){var c=t[i],l=r.base?c[0]+r.base:c[0],u=s[l]||0,d="".concat(l," ").concat(u);s[l]=u+1;var h=n(d),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==h)e[h].references++,e[h].updater(p);else{var f=o(p,r);r.byIndex=i,e.splice(i,0,{identifier:d,updater:f,references:1})}a.push(d)}return a}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var s=r(t=t||[],o=o||{});return function(t){t=t||[];for(var a=0;a<s.length;a++){var i=n(s[a]);e[i].references--}for(var c=r(t,o),l=0;l<s.length;l++){var u=n(s[l]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}s=c}}},311:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},60:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},192:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},760:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var s=n.sourceMap;s&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},865:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var s=e[r]={id:r,exports:{}};return t[r](s,s.exports,n),s.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0,(()=>{const t=function(t,e,n="",r=""){const o=document.createElement(e);return o.innerHTML=r,o.className=n,t.append(o),o};function e(t,e,n){let r=0;for(let o=-1;o<=1;o++)for(let s=-1;s<=1;s++)if(e+o>=0&&n+s>=0&&e+o<=t.length-1&&n+s<=t.length-1){const a=t[e+o][n+s];r+=3===a?1:a}return r-=t[e][n],r}function r(t,e,n){const r=t.querySelector(".field"),o=n;if(null===o||null===r)return 0;let s=0;const a=Array.from(t.querySelectorAll(".cell")).reduce(((t,e,n,r)=>(n%Math.sqrt(r.length)==0?t.push([e]):t[t.length-1].push(e),t)),[]);if(a.length===e)null==o||o.forEach(((t,n)=>{t.forEach(((t,r)=>{const i=a[n][r];i.setAttribute("data-state",t.toString()),i.style.cssText=`width: calc(100% / ${e}); height: calc(100% / ${e});`,s+=o[n][r]}))}));else if(a.length>e)a.forEach(((t,n)=>{if(n<e)t.forEach(((t,r)=>{r<e?(t.setAttribute("data-state",o[n][r].toString()),t.style.cssText=`width: calc(100% / ${e}); height: calc(100% / ${e});`,s+=o[n][r]):t.remove()}));else{const e=t[0].parentElement;null==e||e.remove()}}));else{const t=a.length;null==o||o.forEach(((n,i)=>{let c;i>=t?(c=document.createElement("tr"),c.className="row",r.appendChild(c)):c=a[i][0].parentElement,n.forEach(((n,r)=>{let l;var u;i>=t||r>=t?(l=document.createElement("td"),null===(u=c)||void 0===u||u.append(l),l.setAttribute("data-x",i.toString()),l.setAttribute("data-y",r.toString()),l.classList.add("cell")):l=a[i][r],l.setAttribute("data-state",n.toString()),l.style.cssText=`width: calc(100% / ${e}); height: calc(100% / ${e});`,s+=o[i][r]}))}))}return s}function o(t){return Array.from({length:t},(()=>Array.from({length:t},(()=>0))))}function s(t,e,n){var r;return(e="symbol"==typeof(r=function(t,e){if("object"!=typeof t||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(e))?r:String(r))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}class a{constructor(t){s(this,"store",[[]]),s(this,"size",0),this.size=t,this.setCells(o(t))}getSize(){return this.size}resize(t){const e=o(t);for(let n=0;n<t;n++)for(let r=0;r<t;r++)void 0!==this.store[n]&&r<this.store[n].length&&(e[n][r]=this.store[n][r]);this.setCells(e)}getCells(){return this.store}getCell(t,e){return this.store[t][e]}setCells(t){this.store=t,this.size=t.length}setCellState(t,e,n){this.store[t][e]=n}}function i(t,e,n){var r;return(e="symbol"==typeof(r=function(t,e){if("object"!=typeof t||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(e))?r:String(r))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var c=n(892),l=n.n(c),u=n(760),d=n.n(u),h=n(311),p=n.n(h),f=n(192),A=n.n(f),m=n(60),g=n.n(m),v=n(865),b=n.n(v),C=n(790),y={};y.styleTagTransform=b(),y.setAttributes=A(),y.insert=p().bind(null,"head"),y.domAPI=d(),y.insertStyleElement=g(),l()(C.Z,y),C.Z&&C.Z.locals&&C.Z.locals;const E=document.createElement("div");E.className="game-container",document.body.append(E),new class{constructor(e,n=30,o=400){i(this,"size",20),i(this,"timeInterval",300),i(this,"timerId",null),this.container=e,this.timeInterval=o,this.size=n,this.store=new a(this.size);const[s,c,l,u]=function(e,n,r){const o=t(e,"div","controls"),s=t(o,"input","size-input");s.type="number",s.min="3",s.value=n.toString();const a=t(o,"input","speed-input"),i=t(o,"span","speed-value",r+" ms");a.type="range",a.min="10",a.max="1000",a.step="10",a.value=r.toString(),a.addEventListener("input",(t=>{const e=t.target;i.textContent=e.value+" ms"}));const c=t(e,"button","btn-game","Start"),l=function(t){const e=document.createElement("table");e.className="field";for(let n=0;n<t;n+=1){const r=document.createElement("tr");r.className="row";for(let e=0;e<t;e+=1){const o=document.createElement("td");o.setAttribute("data-x",n.toString()),o.setAttribute("data-y",e.toString()),o.setAttribute("data-state","0"),o.classList.add("cell"),o.style.cssText=`width: calc(100% / ${t}); height: calc(100% / ${t});`,r.appendChild(o)}e.appendChild(r)}return e}(n);return e.append(l),[l,s,a,c]}(this.container,this.size,this.timeInterval),d={onSizeChange:t=>{const e=t.target;this.size=Number(e.value),this.store.resize(this.size),r(this.container,this.size,this.store.getCells())},onSpeedChange:t=>{const e=t.target;this.timeInterval=Number(e.value),null!==this.timerId&&this.restart(h.onStop)}};c.addEventListener("input",d.onSizeChange),l.addEventListener("input",d.onSpeedChange),u.addEventListener("click",(t=>{null===this.timerId?h.onStart():h.onStop()}));const h={onStart:()=>{u.innerHTML="Stop",this.start(h.onStop)},onStop:()=>{u.innerHTML="Start",this.stop()}},p={onDown:t=>{t.preventDefault()},onMove:t=>{var e;const n=null===(e=t.target.classList)||void 0===e?void 0:e.contains("cell");if(1===t.buttons&&n){const e=t.target;e.dataset.state="1";const n=Number(e.dataset.x),r=Number(e.dataset.y);this.store.setCellState(n,r,1)}},onClick:t=>{const e=t.target.classList.contains("cell");if(null!==t.target&&e){const e=t.target,n=e.dataset.state;e.dataset.state="1"===n?"0":"1";const r=Number(e.dataset.x),o=Number(e.dataset.y);this.store.setCellState(r,o,Number(e.dataset.state))}}};s.addEventListener("click",p.onClick),s.addEventListener("mousedown",p.onDown),s.addEventListener("mousemove",p.onMove)}restart(t){this.stop(),this.start(t)}start(t){null===this.timerId&&(this.timerId=setInterval((()=>{const n=this.store.getCells(),o=function(t){const n=Array.from({length:t.length},(()=>Array.from({length:t.length},(()=>0))));for(let r=0;r<t.length;r++)for(let o=0;o<t.length;o++){const s=t[r][o],a=e(t,r,o);0===s&&3===a?n[r][o]=1:1===s&&a>=2&&a<=3?n[r][o]=t[r][o]:1===s&&(a<2||a>3)&&(t[r][o]=3,n[r][o]=0)}return n}(n);0===r(this.container,this.size,n)&&t(),this.store.setCells(o)}),this.timeInterval))}stop(){null!==this.timerId&&(clearInterval(this.timerId),this.timerId=null)}getCell(t,e){return this.store.getCell(t,e)}getCells(){return this.store.getCells()}}(E)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,