(()=>{"use strict";var t={790:(t,e,n)=>{n.d(e,{Z:()=>a});var r=n(559),o=n.n(r),s=n(476),i=n.n(s)()(o());i.push([t.id,':root {\n  --grid-size: 30;\n}\n\nhtml {\n  background-color: black;\n  color: white;\n}\n\n.game-container,\n.container {\n  width: 100%;\n  height: 100vh;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 16px;\n}\n\n.controls {\n  width: 100%;\n  display: flex;\n  gap: 10px;\n  justify-content: center;\n}\n\n.field {\n  flex-grow: 0;\n  border-collapse: collapse;\n  width: calc(100vh - 200px);\n  height: calc(100vh - 200px);\n}\n\n.cell {\n  border: 1px solid rgb(255 255 255 / 0.2);\n  width: calc(100% / var(--grid-size));\n  height: calc(100% / var(--grid-size));\n  transition: 0.2s;\n}\n\n.cell[data-state="1"] {\n  background-color: green;\n  transition: 0.2s;\n}\n\n.cell[data-state="3"] {\n  background-color: rgb(0 207 164 / 50%);\n  transition: 0.2s;\n}\n',"",{version:3,sources:["webpack://./style.css"],names:[],mappings:"AAAA;EACE,eAAe;AACjB;;AAEA;EACE,uBAAuB;EACvB,YAAY;AACd;;AAEA;;EAEE,WAAW;EACX,aAAa;EACb,cAAc;EACd,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,SAAS;AACX;;AAEA;EACE,WAAW;EACX,aAAa;EACb,SAAS;EACT,uBAAuB;AACzB;;AAEA;EACE,YAAY;EACZ,yBAAyB;EACzB,0BAA0B;EAC1B,2BAA2B;AAC7B;;AAEA;EACE,wCAAwC;EACxC,oCAAoC;EACpC,qCAAqC;EACrC,gBAAgB;AAClB;;AAEA;EACE,uBAAuB;EACvB,gBAAgB;AAClB;;AAEA;EACE,sCAAsC;EACtC,gBAAgB;AAClB",sourcesContent:[':root {\n  --grid-size: 30;\n}\n\nhtml {\n  background-color: black;\n  color: white;\n}\n\n.game-container,\n.container {\n  width: 100%;\n  height: 100vh;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 16px;\n}\n\n.controls {\n  width: 100%;\n  display: flex;\n  gap: 10px;\n  justify-content: center;\n}\n\n.field {\n  flex-grow: 0;\n  border-collapse: collapse;\n  width: calc(100vh - 200px);\n  height: calc(100vh - 200px);\n}\n\n.cell {\n  border: 1px solid rgb(255 255 255 / 0.2);\n  width: calc(100% / var(--grid-size));\n  height: calc(100% / var(--grid-size));\n  transition: 0.2s;\n}\n\n.cell[data-state="1"] {\n  background-color: green;\n  transition: 0.2s;\n}\n\n.cell[data-state="3"] {\n  background-color: rgb(0 207 164 / 50%);\n  transition: 0.2s;\n}\n'],sourceRoot:""}]);const a=i},476:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,o,s){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(r)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(i[l]=!0)}for(var c=0;c<t.length;c++){var u=[].concat(t[c]);r&&i[u[0]]||(void 0!==s&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=s),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),e.push(u))}},e}},559:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),s="/*# ".concat(o," */");return[e].concat([s]).join("\n")}return[e].join("\n")}},892:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var s={},i=[],a=0;a<t.length;a++){var l=t[a],c=r.base?l[0]+r.base:l[0],u=s[c]||0,d="".concat(c," ").concat(u);s[c]=u+1;var p=n(d),h={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)e[p].references++,e[p].updater(h);else{var f=o(h,r);r.byIndex=a,e.splice(a,0,{identifier:d,updater:f,references:1})}i.push(d)}return i}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var s=r(t=t||[],o=o||{});return function(t){t=t||[];for(var i=0;i<s.length;i++){var a=n(s[i]);e[a].references--}for(var l=r(t,o),c=0;c<s.length;c++){var u=n(s[c]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}s=l}}},311:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},60:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},192:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},760:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var s=n.sourceMap;s&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},865:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var s=e[r]={id:r,exports:{}};return t[r](s,s.exports,n),s.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0,(()=>{function t(t){const e=t.trim(),n=document.createElement("template");return n.innerHTML=e,n.content.children}function e(t,e){const n=document.createElement("td");return n.className="cell",n.dataset.x=t.toString(),n.dataset.y=e.toString(),n.dataset.state="0",n}function r({field:t,cellRow:e,cellCol:n}){let r=0;const o=t.length;return[-1,0,1].forEach((s=>{[-1,0,1].forEach((i=>{const a=e+s,l=n+i;if(a>=0&&l>=0&&a<=o-1&&l<=o-1){const o=3===t[e+s][n+i];r+=o?1:t[e+s][n+i]}}))})),r-=t[e][n],r}function o(t,n,r){const o=t.querySelector(".field");if(null===r||null===o)return 0;let s=0;const i=Array.from(o.querySelectorAll(".row")).reduce(((t,o,i)=>{if(i<n){const a=Array.from(o.children).reduce(((t,e,o)=>(o<n?(e.setAttribute("data-state",r[i][o].toString()),s+=r[i][o],t.push(e)):e.remove(),t)),[]);if(a.length<n)for(let t=a.length;t<n;t+=1){const n=e(i,t);o.append(n),a.push(n)}t.push(a)}else o.remove();return t}),[]);if(i.length<n)for(let t=i.length;t<n;t+=1){const r=document.createElement("tr");r.className="row",i[t]=[];for(let o=0;o<n;o+=1){const n=e(t,o);r.append(n),i[t].push(n)}o.append(r)}return s}function s(t){return Array.from({length:t},(()=>Array.from({length:t},(()=>0))))}class i{constructor(t=0){var e,n,r,o;e=this,r=[[]],(n="symbol"==typeof(o=function(t,e){if("object"!=typeof t||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n="store"))?o:String(o))in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,this.size=t,this.size=t,this.setCells(s(t))}getSize(){return this.size}resize(t){const e=s(t);for(let n=0;n<t;n++)for(let r=0;r<t;r++)void 0!==this.store[n]&&r<this.store[n].length&&(e[n][r]=this.store[n][r]);this.setCells(e)}getCells(){return this.store}getCell(t,e){return this.store[t][e]}setCells(t){this.store=t,this.size=t.length}setCellState(t,e,n){this.store[t][e]=n}}const a=(t,e)=>{let n=null;return r=>{null!==n&&clearTimeout(n),n=setTimeout((()=>{t.bind(void 0,r)()}),e)}};var l=n(892),c=n.n(l),u=n(760),d=n.n(u),p=n(311),h=n.n(p),f=n(192),m=n.n(f),A=n(60),v=n.n(A),g=n(865),C=n.n(g),b=n(790),y={};y.styleTagTransform=C(),y.setAttributes=m(),y.insert=h().bind(null,"head"),y.domAPI=d(),y.insertStyleElement=v(),c()(b.Z,y),b.Z&&b.Z.locals&&b.Z.locals;const E=document.createElement("div");E.className="game-container",document.body.append(E);const x=new class{constructor(t,e=30,n=400){var r,o,s,a;r=this,s=null,(o="symbol"==typeof(a=function(t,e){if("object"!=typeof t||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(o="timerId"))?a:String(a))in r?Object.defineProperty(r,o,{value:s,enumerable:!0,configurable:!0,writable:!0}):r[o]=s,this.container=t,this.size=e,this.timeInterval=n,this.store=new i(this.size)}init(){const{field:n,sizeInput:r,speedInput:o,button:s}=function({container:n,size:r,timeInterval:o}){document.documentElement.style.cssText=`--grid-size: ${r}`;const s=t('<div class="controls"></div>')[0],i=t(`\n    <input class="size-input" type="number" min="3" max="100" value="${r.toString()}"/>\n  `)[0],a=t(`\n    <input class="speed-input" type="range" min="10" max="1000"\n    step="10" value="${o.toString()}"/>\n  `)[0],l=t(`<span class="speed-value">${o} ms</span>`)[0],c=t('<button class="btn-game">Start</button>')[0],u=function(t){const n=document.createElement("table");n.className="field";for(let r=0;r<t;r+=1){const o=document.createElement("tr");o.className="row";for(let n=0;n<t;n+=1){const t=e(r,n);o.appendChild(t)}n.appendChild(o)}return n}(r);return i.addEventListener("input",(t=>{const e=t.target,n=Number(e.value);n>100&&(e.value="100"),n<3&&(e.value="3")})),a.addEventListener("input",(t=>{const e=t.target;l.textContent=e.value+" ms"})),n.append(s),s.append(i),s.append(a),s.append(l),n.append(c),n.append(u),{field:u,sizeInput:i,speedInput:a,button:c}}({container:this.container,size:this.size,timeInterval:this.timeInterval});this.initControlsHandlers(r,o,s),this.initMouseHandlers(n)}initControlsHandlers(t,e,n){const r={onSizeChange:a((t=>{const e=t.target;this.size=Number(e.value),document.documentElement.style.cssText=`--grid-size: ${this.size}`,this.store.resize(this.size),o(this.container,this.size,this.store.getCells())}),300),onSpeedChange:t=>{const e=t.target;this.timeInterval=Number(e.value),null!==this.timerId&&this.restart(n)}};t.addEventListener("input",r.onSizeChange),e.addEventListener("input",r.onSpeedChange),n.addEventListener("click",(t=>{null===this.timerId?this.start(n):this.stop(n)}))}initMouseHandlers(t){const e={onDown:t=>{t.preventDefault()},onMove:t=>{var e;const n=null===(e=t.target.classList)||void 0===e?void 0:e.contains("cell");if(1===t.buttons&&n){const e=t.target;e.dataset.state="1";const n=Number(e.dataset.x),r=Number(e.dataset.y);this.store.setCellState(n,r,1)}},onTouchMove:t=>{var e;if(t.touches.length>1)return;t.preventDefault();const n=document.elementFromPoint(t.touches[0].clientX,t.touches[0].clientY);if(null===(e=n.classList)||void 0===e?void 0:e.contains("cell")){n.dataset.state="1";const t=Number(n.dataset.x),e=Number(n.dataset.y);this.store.setCellState(t,e,1)}},onClick:t=>{if(t.target.classList.contains("cell")){const e=t.target,n=e.dataset.state;e.dataset.state="1"===n?"0":"1";const r=Number(e.dataset.x),o=Number(e.dataset.y);this.store.setCellState(r,o,Number(e.dataset.state))}}};t.addEventListener("click",e.onClick),t.addEventListener("touchmove",e.onTouchMove,{passive:!1}),t.addEventListener("mousedown",e.onDown),t.addEventListener("mousemove",e.onMove)}restart(t){this.stop(t),this.start(t)}start(t){null===this.timerId&&(t.innerHTML="Stop",this.timerId=setInterval((()=>{const e=this.store.getCells(),n=function(t){const e=Array.from({length:t.length},(()=>Array.from({length:t.length},(()=>0))));for(let n=0;n<t.length;n++)for(let o=0;o<t.length;o++){const s=t[n][o],i=r({field:t,cellRow:n,cellCol:o});0===s&&3===i?e[n][o]=1:1===s&&i>=2&&i<=3?e[n][o]=t[n][o]:1===s&&(i<2||i>3)&&(t[n][o]=3,e[n][o]=0)}return e}(e);0===o(this.container,this.size,e)&&this.stop(t),this.store.setCells(n)}),this.timeInterval))}stop(t){null!==this.timerId&&(t.innerHTML="Start",clearInterval(this.timerId),this.timerId=null)}getCell(t,e){return this.store.getCell(t,e)}}(E);x.init()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,